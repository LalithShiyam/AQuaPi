%% Purpose
% This is a wrapper script for running the 'coreDynamicUmapRecon.m' program, 
% which is responsible reconstructing the PET list-mode after the alignment
% of u-maps with the PET emission data.
%%
%% Author information
% Lalith Kumar Shiyam Sundar, 
% Quantitative Imaging and Medical Physics, Medical University of Vienna

%% Inputs to be entered by the user                  
%  Inputs: 
%       DURinputs.subjectID= ID of the subject.
%       DURinputs.pathOfStaticACmaps= path of the static u-maps (can be
%       more than 1)
%       DURinputs.pathOfReconParamFile= path of the reconstruction
%       parameter file
%       DURinputs.pathOfDicomMRnavigators= path where the DICOM MR
%       navigators are stored (EPI sequences need to be in 'split' mode)
%       DURinputs.pathToListModePET= path pointing towards the PET
%       list-mode data.
%       DURinputs.pathToCopyReconPETdata = path to copy the reconstructed
%       pet data.
%       
%  Outputs: 
%       Dynamic reconstructions of the PET data with motion induced AC
%       maps.

%% Limitations
% Only "SPLIT" EPI images are allowed - NIFTI support not included at this
% point in time, but will be added in due course.

%% Program start
% Copy your physical path of the 3D time-of-flight MR angiography DICOM
% images.

coreSegInputs.pathOfAngio = '/Users/lalith/Documents/HC002/MR-TOF'; % To be filled in by the user!
coreSegInputs.patientCode = 'HC002'; % To be filled in by the user!

%% Hard-coded variables.

% Error messages

errorMsg{1}='This program needs a path to the "DICOM" series!';
errorMsg{2}='Raise an issue in github...';

% path to store the data.

cd(coreSegInputs.pathOfAngio); 
cd .. 
coreSegInputs.path2StoreSeg=pwd; % path where the output will be stored.


%% Preliminary checks are being done here, to see if the program can be run.
fileFormat=checkFileFormat(coreSegInputs.pathOfAngio); % check if the folder has dicom images.
switch fileFormat 
    case 'Dicom'
        disp(['DICOM images found in ',coreSegInputs.pathOfAngio,'...']);
        disp('Applying segmentation algorithm on the dataset...');
        coreSegmentation(coreSegInputs); % Running the coreSegmentation algorithm
    otherwise
        error(errorMsg{1});
        error(errorMsg{2});
end

%%


